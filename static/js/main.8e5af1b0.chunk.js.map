{"version":3,"sources":["components/Resultado.jsx","components/PrecioMoneda.js","components/NumberInput.jsx","components/Conversor.jsx","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["Resultado","operacion","calculo","PrecioMoneda","props","state","error","isLoaded","items","handleChangeValor","bind","event","fetch","then","res","json","result","setState","this","message","className","onChange","disabled","map","item","value","casa","nombre","venta","Component","NumberInput","valor","useState","numeros","setNumeros","calcular","calcular_pais","calculo_retenciones","type","icon","faExchangeAlt","e","parseFloat","target","id","htmlFor","Conversor","name","App","role","xmlns","width","height","fill","viewBox","d","style","textDecoration","color","href","tabIndex","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.8e5af1b0.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Resultado = ({operacion, calculo}) => {\r\n    return (\r\n        <>\r\n            <div>\r\n                <br />\r\n                <span>{operacion}: <b>${calculo}</b></span>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nResultado.propTypes = {\r\n    operacion: PropTypes.string,\r\n    calculo: PropTypes.number\r\n}\r\n\r\nexport default Resultado\r\n","import React, { Component } from 'react'\r\n\r\n\r\nclass PrecioMoneda extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            error: null,\r\n            isLoaded: false,\r\n            items: []\r\n        };\r\n        this.handleChangeValor = this.handleChangeValor.bind(this);\r\n    }\r\n\r\n    handleChangeValor(event) {\r\n        // const nombreEtiqueta = event.target.value;\r\n        // console.log(nombreEtiqueta);\r\n        // const valores = nombreEtiqueta.split('|')\r\n        // const valorMoneda = valores[1]\r\n        // console.log(valorMoneda);\r\n        // this.setNumeros({ value: valorMoneda });\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch(\"https://www.dolarsi.com/api/api.php?type=valoresprincipales\")\r\n            .then(res => res.json())\r\n            .then(\r\n                (result) => {\r\n                    this.setState({\r\n                        isLoaded: true,\r\n                        items: result\r\n                    });\r\n                },\r\n                // Nota: es importante manejar errores aquí y no en \r\n                // un bloque catch() para que no interceptemos errores\r\n                // de errores reales en los componentes.\r\n                (error) => {\r\n                    this.setState({\r\n                        isLoaded: true,\r\n                        error\r\n                    });\r\n                }\r\n            )\r\n    }\r\n\r\n    render() {\r\n        const { error, isLoaded, items } = this.state;\r\n        if (error) {\r\n            return <div>Error: {error.message}</div>;\r\n        } else if (!isLoaded) {\r\n            return <div>Cargando...</div>;\r\n        } else {\r\n            return (\r\n                <div className=\"col-5\">\r\n                    <select className=\"form-select form-select-sm\" onChange={this.handleChangeValor} disabled>\r\n                        {items.map(item => (\r\n                            <option value={item.casa.nombre + \"|\" + item.casa.venta} key={item.casa.nombre + \"|\" + item.casa.venta}>{item.casa.nombre}</option>\r\n                        ))}\r\n                    </select>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport default PrecioMoneda\r\n","import React, { useState } from 'react'\r\nimport Resultado from './Resultado'\r\nimport PropTypes from 'prop-types'\r\nimport PrecioMoneda from './PrecioMoneda'\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome' // Se agrega fontawesome\r\nimport {faExchangeAlt} from '@fortawesome/free-solid-svg-icons' // Se agrega iconos fontawesome\r\n\r\nconst NumberInput = ({ valor }) => {\r\n\r\n    const valorDolar = 101.65;\r\n\r\n    const [numeros, setNumeros] = useState(0);\r\n\r\n    const handleChange = (e) => {\r\n        setNumeros(parseFloat(e.target.value));\r\n    };\r\n\r\n    const calcular = () => numeros * valorDolar;\r\n    const calcular_pais = () => 30 / 100 * calcular();\r\n    const calculo_retenciones = () => 35 / 100 * calcular();\r\n    const calculo_total = () => calcular() + calcular_pais() + calculo_retenciones();\r\n\r\n    return (\r\n        <>\r\n            <div className=\"row\">\r\n                <div className=\"col-5\">\r\n                    <select className=\"form-select form-select-sm\" aria-label=\"Peso Argentino\" disabled>\r\n                        <option>Peso Argentino</option>\r\n                    </select>\r\n                </div>\r\n                <div className=\"col-2\">\r\n                    <button type=\"button\" className=\"btn btn-light btn-sm\"><i><FontAwesomeIcon icon={faExchangeAlt}/></i></button>\r\n                </div>\r\n                <PrecioMoneda />\r\n            </div>\r\n            <hr />\r\n            <div className=\"form-floating mb-3\">\r\n                <input type=\"number\" onChange={handleChange} value={numeros} className=\"form-control\" id=\"floatingInput\" aria-placeholder=\"\" />\r\n                <label htmlFor=\"floatingInput\">Ingrese el valor a calcular</label>\r\n            </div>\r\n            <hr />\r\n            <Resultado operacion=\"Costo en pesos (Dólar Oficial)\" calculo={calcular()} />\r\n            <Resultado operacion=\"Impuesto País del 30%\" calculo={calcular_pais()} />\r\n            <Resultado operacion=\"Retencion del 35%\" calculo={calculo_retenciones()} />\r\n            <Resultado operacion=\"Total en pesos con impuesto al dólar\" calculo={calculo_total()} />\r\n        </>\r\n    )\r\n}\r\n\r\nNumberInput.propTypes = {\r\n    valor: PropTypes.number,\r\n}\r\n\r\nexport default NumberInput\r\n","import NumberInput from './NumberInput'\r\n\r\n\r\nconst Conversor = () => {\r\n    \r\n    return (\r\n        <div>\r\n            <NumberInput name=\"numero\" />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Conversor","import React from 'react'\nimport Conversor from './components/Conversor'\n\nconst App = () => {\n  return (\n    <div className=\"container text-center\">\n      <h1 className=\"display-3\">Conversor</h1>\n      <hr />\n      <div className=\"alert alert-secondary d-flex align-items-center\" role=\"alert\">\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"currentColor\" className=\"bi bi-exclamation-triangle-fill flex-shrink-0 me-2\" viewBox=\"0 0 16 16\" role=\"img\" aria-label=\"Warning:\">\n          <path d=\"M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z\"/>\n        </svg>\n        <div>\n          Valor del Dólar Oficial: <b><a style={{ textDecoration: 'none', color: '#616161' }} data-bs-toggle=\"modal\" href=\"#staticBackdrop\" role=\"button\">101.65</a></b>\n        </div>\n      </div>\n      <hr />\n      {/* <!-- Modal --> */}\n      <Conversor />\n      <div className=\"modal fade\" id=\"staticBackdrop\" data-bs-backdrop=\"static\" data-bs-keyboard=\"false\" tabIndex=\"-1\" aria-labelledby=\"staticBackdropLabel\" aria-hidden=\"true\">\n        <div className=\"modal-dialog\">\n          <div className=\"modal-content\">\n            <div className=\"modal-header\">\n              <h5 className=\"modal-title\" id=\"staticBackdropLabel\">Información</h5>\n              <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\n            </div>\n            <div className=\"modal-body\">\n              <p>El cálculo del dólar oficial se toma en base a la cotización del día de la entidad del Banco Nación.</p>\n            </div>\n            <div className=\"modal-footer\">\n              <button type=\"button\" className=\"btn btn-secondary\" data-bs-dismiss=\"modal\">Cerrar</button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\n\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}